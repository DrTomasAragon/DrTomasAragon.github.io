[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This GitHub Pages site is for technical notes for the Team Public Health blog."
  },
  {
    "objectID": "about.html#about-drtomasaragon.github.io",
    "href": "about.html#about-drtomasaragon.github.io",
    "title": "About",
    "section": "",
    "text": "This GitHub Pages site is for technical notes for the Team Public Health blog."
  },
  {
    "objectID": "about.html#about-tomás",
    "href": "about.html#about-tomás",
    "title": "About",
    "section": "About Tomás",
    "text": "About Tomás\nDr. Tomás Aragón serves as the director of the California Department of Public Health and the State Public Health Officer, since January 4, 2021. Prior to coming to CDPH, he was the health officer for the City and County of San Francisco and director of the public health division.\nDr. Aragón has served in public health leadership roles for more than 25 years (communicable disease controller, deputy health officer, health officer, community health and chronic disease epidemiologist), including directing a public health emergency preparedness and response research and training center at the University of California, Berkeley School of Public Health.\nAs CDPH director, striving to embody and promote the universal values of dignity, equity, compassion and belonging, he works through collaborative partnerships to mobilize communities and institutions to transform policies and systems towards a culture of equity, antiracism, healing and health for all people and our planet. As State Public Health Officer, he exercises leadership and legal authority to protect health and prevent disease and injury.\nDr. Aragón graduated from University of California, Berkeley (B.A., Molecular Biology; Dr.P.H., Epidemiology), Harvard Medical School (M.D.), and Harvard School of Public Health (M.P.H.). He received certification in Strategic Decision and Risk Management in Healthcare from Stanford University. He completed his clinical and research training at University of California, San Francisco (San Francisco General Hospital Primary Care Internal Medicine; Clinical Infectious Diseases; and Traineeship in AIDS Prevention Studies).​"
  },
  {
    "objectID": "posts/2024-07-07-moved-to-teampublichealth-substack/index.html",
    "href": "posts/2024-07-07-moved-to-teampublichealth-substack/index.html",
    "title": "Moved to Team Public Health at Substack!",
    "section": "",
    "text": "This GitHub Pages site is for technical notes for the Team Public Health blog."
  },
  {
    "objectID": "posts/2023-01-14-my-journey-from-r-to-julia/index.html",
    "href": "posts/2023-01-14-my-journey-from-r-to-julia/index.html",
    "title": "My journey from R to Julia",
    "section": "",
    "text": "For 15 years, as volunteer adjunct faculty, I taught “Applied Epidemiology using R” at the UC Berkeley School of Public Health. I started teaching this course in the early 2000s when most people were not interested in R. Eventually R’s popularity grew, and so did my course enrollment. I taught basic R programming applied to epidemiologic concepts. Students worked on a project of their choosing. Because I had students from multiple disciplines, their projects were often very innovative and I learned a lot from them.\nOver the 15 years I witnessed the emergence of “data science” and students’ ingenuity and creativeness in their projects. Naturally, the course evolved too. I introduced Bayesian networks as a unifying framework to introduce probablistic dependence, causal graphs, and decision networks (for decision analysis) [1].\nI started dabbling in Python. Unfortunately, the COVID-19 pandemic interrupted my teaching because I was the health officer of San Francisco and director of the Population Health Division. Working on the pandemic response left me little time to conduct analyses or to learn Python.1\nI cannot remember when, but eventually I discovered Julia—a programming language designed for scientific computing with the intuition of Python or R, but with the speed of C++. I fell in love with Julia and I gave up on learning Python. I did not, and do not, have the time to maintain core competency in more than 1.5 programming languages.2 As I learned more Julia, I became convinced, that for me, learning Julia was a better long term investment than sticking with R.\nI use programming to explore or test my epidemiologic intuition, to learn new methods, and to visualize and analyze data. I have a personal interest in Bayesian networks, decision networks, causal inference, Markov decision processes, and agent-based modeling.3\nHere are some key Julia features that I believe epidemiologists will value:\n\nmultiple dispatch (see below)\ncomposite types\njust-in-time compiling\nspeed (very very fast)\ncommunity (mostly computer science, mathematics, engineering)\n1-based indexing like R and MATLAB (Python is 0-based indexing)\nCapabilities similar to dpylr in R 4, 5\nPipe operator similar to %&gt;% in R\ngeneral programming language (like Python)\n\nJulia enables more intuitive programming. For example, in R, we try to avoid loops because they are very inefficient. In Julia, loops are efficient because they compile before execution. This promotes programming that is more natural.\nBelow I demonstrate multiple dispatch with a trivial example. R is single dispatch."
  },
  {
    "objectID": "posts/2023-01-14-my-journey-from-r-to-julia/index.html#my-history-with-the-r-language",
    "href": "posts/2023-01-14-my-journey-from-r-to-julia/index.html#my-history-with-the-r-language",
    "title": "My journey from R to Julia",
    "section": "",
    "text": "For 15 years, as volunteer adjunct faculty, I taught “Applied Epidemiology using R” at the UC Berkeley School of Public Health. I started teaching this course in the early 2000s when most people were not interested in R. Eventually R’s popularity grew, and so did my course enrollment. I taught basic R programming applied to epidemiologic concepts. Students worked on a project of their choosing. Because I had students from multiple disciplines, their projects were often very innovative and I learned a lot from them.\nOver the 15 years I witnessed the emergence of “data science” and students’ ingenuity and creativeness in their projects. Naturally, the course evolved too. I introduced Bayesian networks as a unifying framework to introduce probablistic dependence, causal graphs, and decision networks (for decision analysis) [1].\nI started dabbling in Python. Unfortunately, the COVID-19 pandemic interrupted my teaching because I was the health officer of San Francisco and director of the Population Health Division. Working on the pandemic response left me little time to conduct analyses or to learn Python.1\nI cannot remember when, but eventually I discovered Julia—a programming language designed for scientific computing with the intuition of Python or R, but with the speed of C++. I fell in love with Julia and I gave up on learning Python. I did not, and do not, have the time to maintain core competency in more than 1.5 programming languages.2 As I learned more Julia, I became convinced, that for me, learning Julia was a better long term investment than sticking with R.\nI use programming to explore or test my epidemiologic intuition, to learn new methods, and to visualize and analyze data. I have a personal interest in Bayesian networks, decision networks, causal inference, Markov decision processes, and agent-based modeling.3\nHere are some key Julia features that I believe epidemiologists will value:\n\nmultiple dispatch (see below)\ncomposite types\njust-in-time compiling\nspeed (very very fast)\ncommunity (mostly computer science, mathematics, engineering)\n1-based indexing like R and MATLAB (Python is 0-based indexing)\nCapabilities similar to dpylr in R 4, 5\nPipe operator similar to %&gt;% in R\ngeneral programming language (like Python)\n\nJulia enables more intuitive programming. For example, in R, we try to avoid loops because they are very inefficient. In Julia, loops are efficient because they compile before execution. This promotes programming that is more natural.\nBelow I demonstrate multiple dispatch with a trivial example. R is single dispatch."
  },
  {
    "objectID": "posts/2023-01-14-my-journey-from-r-to-julia/index.html#multiple-dispatch-example-in-julia",
    "href": "posts/2023-01-14-my-journey-from-r-to-julia/index.html#multiple-dispatch-example-in-julia",
    "title": "My journey from R to Julia",
    "section": "Multiple dispatch example in Julia",
    "text": "Multiple dispatch example in Julia\nI was the founding developer of the R ‘epitools’ package.6 I developed functions for basic epidemiologic analyses (eg, 2x2 tables), several from Rothman’s “Modern Epidemiology” textbook. For example, if I wanted to create a function to calculate an odds ratio for a 2x2 contingency table, the data could be provided in several ways:\n\nfour integer counts,\ntwo proportions, or\na 2x2 table (matrix)\ntwo vectors with categorical data\n\nIf I wanted to write one function to handle these possible data types as arguments, I would have to do a lot of processing and checking of data types in order to call the next function (nested or external). This requires much more work than is necessary. Let’s do this is Julia using multiple dispatch.\nIn 2003, we published a study that provided evidence that drinking unfiltered municipal tap water was associated with developing cryptosporidiosis among patients with advanced HIV disease [2]. Here is a contingency table from this paper.\n\n\n\nExposure\nCase\nControl\n\n\n\n\nHighest\n12\n6\n\n\nIntermediate\n35\n64\n\n\nLowest\n2\n29\n\n\n\nLet’s calculate the unadjusted odds ratio comparing the highest exposure category to the lowest exposure category. Here is the 2x2 table for this calculation.\n\n\n\nExposure\nCase\nControl\n\n\n\n\nHighest\n12\n6\n\n\nLowest\n2\n29\n\n\n\nFor an appropriately structured table, for example,\n\n\n\nExposure\nCase\nControl\n\n\n\n\nHighest\na\nb\n\n\nLowest\nc\nd\n\n\n\nthe odds ratio is the cross-product:\n\\[\nOR = \\frac{a d}{b c}\n\\]\nFor a case-control design, the odds ratio is the ratio of the exposure odds.\n\\[\nOR = \\frac{p_1/(1 - p_1)}{p_0/(1 - p_0)}\n\\]\nWe will create three functions that can receive three different types of arguments to calculate an odds ratio.\n\nfour integer counts,\ntwo proportions, or\na 2x2 table (matrix)\n\nThe catch is that the three functions will have the same name: oddsratio. This is possible in Julia because of multiple dispatch. In contrast, R is single dispatch.\n\n## Function 1\nfunction oddsratio(a::Int, b::Int, c::Int, d::Int)\n    or = (a * d) / (b * c)\n    return or\nend\n\noddsratio (generic function with 1 method)\n\n\nLet’s test the oddsratio function by passing four integers from our 2x2 table.\n\noddsratio(12, 6, 2, 29)\n\n29.0\n\n\nHere is the second function to handle arguments that are proportions; for example, the exposure odds comparing cases to controls.\n\n## Function 2\nfunction oddsratio(p1::Float64, p0::Float64)\n    or = ((p1)/(1 - p1)) / ((p0)/(1 - p0))\n    return or\nend\n\noddsratio (generic function with 2 methods)\n\n\nLet’s test the oddsratio function by passing two proportions from our 2x2 table.\n\nprop1 = 12 / (12 + 2) # probability of exposure among cases\nprop0 = 6 / (6 + 29) # probability of exposure among controls\noddsratio(prop1, prop0)\n\n28.999999999999982\n\n\nFinally, here is the third function to handle an argument that is a 2x2 table (matrix).\n\n## Function 3\nfunction oddsratio(x::Matrix{Int})\n    or = (x[1, 1] * x[2, 2]) / (x[1, 2] * x[2, 1])\n    return or\nend\n\noddsratio (generic function with 3 methods)\n\n\nLet’s test the oddsratio function by passing our 2x2 table.\n\ntab = [12 6; 2 29]\n\n2×2 Matrix{Int64}:\n 12   6\n  2  29\n\n\n\noddsratio(tab)\n\n29.0\n\n\nThis is called multiple dispatch. The oddsratio function has three methods and can handle multiple data types. Notice how easy that was.\n\nmethods(oddsratio)\n\n# 3 methods for generic function oddsratio from Main.Notebook: oddsratio(x::Matrix{Int64}) in Main.Notebook at /Users/tja/Library/CloudStorage/OneDrive-CADepartmentofPublicHealth/tja/gh/blog_dev/myblog/posts/2023-01-14-my-journey-from-r-to-julia/index.qmd:235  oddsratio(p1::Float64, p0::Float64) in Main.Notebook at /Users/tja/Library/CloudStorage/OneDrive-CADepartmentofPublicHealth/tja/gh/blog_dev/myblog/posts/2023-01-14-my-journey-from-r-to-julia/index.qmd:206  oddsratio(a::Int64, b::Int64, c::Int64, d::Int64) in Main.Notebook at /Users/tja/Library/CloudStorage/OneDrive-CADepartmentofPublicHealth/tja/gh/blog_dev/myblog/posts/2023-01-14-my-journey-from-r-to-julia/index.qmd:179 \n\n\nWow! Now anyone, including me, can add new methods to the oddsratio function without disrupting previous methods. This is very powerful. Other languages accomplish this using object-oriented programming. Julia is not an object-oriented programming lanuage."
  },
  {
    "objectID": "posts/2023-01-14-my-journey-from-r-to-julia/index.html#summary",
    "href": "posts/2023-01-14-my-journey-from-r-to-julia/index.html#summary",
    "title": "My journey from R to Julia",
    "section": "Summary",
    "text": "Summary\nIn this blog entry I summarized why I switched from R to Julia. I illustrated how multiple dispatch works with functions. Notice how easy it was for me to create an oddsratio function with three methods to handle different argument data types (integer counts, proportions, and a matrix).\nI enjoy Julia and you will too. You can also run R or Python from Julia without skipping a beat.\nI will be posting simple examples that highlight Julia features applied to basic epidemiology or epidemiologic programming."
  },
  {
    "objectID": "posts/2023-01-14-my-journey-from-r-to-julia/index.html#appendix",
    "href": "posts/2023-01-14-my-journey-from-r-to-julia/index.html#appendix",
    "title": "My journey from R to Julia",
    "section": "Appendix",
    "text": "Appendix\nJulia is very flexible in the creation of functions. Here are the same three functions in an abbreviated form.\n\n## Function 1\noddsratio(a::Int, b::Int, c::Int, d::Int) = (a * d) / (b * c)\n\noddsratio (generic function with 3 methods)\n\n\n\n## Function 2\noddsratio(p1::Float64, p0::Float64) = ((p1)/(1 - p1)) / ((p0)/(1 - p0))\n\noddsratio (generic function with 3 methods)\n\n\n\n## Function 3\noddsratio(x::Matrix{Int}) = (x[1, 1] * x[2, 2]) / (x[1, 2] * x[2, 1])\n\noddsratio (generic function with 3 methods)\n\n\nFrom my biased perspective, Julia has a simplicity and elegance that is lacking in R."
  },
  {
    "objectID": "posts/2023-01-14-my-journey-from-r-to-julia/index.html#footnotes",
    "href": "posts/2023-01-14-my-journey-from-r-to-julia/index.html#footnotes",
    "title": "My journey from R to Julia",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nI did not enjoy Python.↩︎\nI still use R occassionally; that is the “.5”.↩︎\nThe more I study the more I am humbled by the enormous talent out there. I am only stratching the surface.↩︎\nSee https://bkamins.github.io/julialang/2020/07/03/dplyr-vs-df.html↩︎\nSee https://juliadata.github.io/DataFramesMeta.jl/stable/dplyr/↩︎\nSee https://cran.r-project.org/web/packages/epitools/index.html↩︎"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Technical notes",
    "section": "",
    "text": "Moved to Team Public Health at Substack!\n\n\n\n\n\n\nPublic health\n\n\nLeadership\n\n\nJulia language\n\n\n\nThis web site is for technical notes. \n\n\n\n\n\nJul 7, 2024\n\n\nTomás Aragón\n\n\n\n\n\n\n\n\n\n\n\n\nMy journey from R to Julia\n\n\n\n\n\n\nJulia language\n\n\nR language\n\n\nPython\n\n\nData science\n\n\nProgramming\n\n\nEpidemiology\n\n\nScientific computing\n\n\n\nA very brief introduction to Julia for epidemiologists \n\n\n\n\n\nJan 14, 2023\n\n\nTomás Aragón\n\n\n\n\n\n\nNo matching items"
  }
]